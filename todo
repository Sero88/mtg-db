Doing: 

Add functionality  
Follows what we're adding to the db in our collection. The same fields.
* Plan it - when search have a + sign to add to collection or remove
** Add card will depend on the name of the card in order to search the API
*** We will show results and query both the collection and the API

* Add the set selection functionality (any set - or specify the set)
=========================
Tasks

About: 
The site will basically be a user API to access the database. Without logging in, the user won't have access. 

Calling scryfall API
This is the structure of how the db will be saved. Pretty much just data 
that pertains to our collection. 

Treat cards that are two-cards-in-one separate. If the card_face object exists, save the other face in a separate table. 
These type of cards won't count against total. Will have their own entries, but when doing search will join these tables with $lookup

ID (automatically by MongoDB)
(don't need scryfall id because we will hold many different types/sets)

OracleId: string (same across reprinted card editions)
Card Name: string
mana_cost: we need to write a regular expression to convert mana_cost value if dual cards
color_identity: string[],
sets: string[] (use unique print or prints_search_uri), 
Quantity: number,
oracle_text: string[],
keywords: string[],
card_type: "normal|dual" (my own field based on scryfall face count)
legalities: {}
loyalty: number|null
name: string
power: string
toughness: string
type_line: string
artist: string
flavor_text: string|null
image_uri = using image_uris field get one url (normal)
rarity: string
sets: string[]










===> Correction with these. Since we plan on doing a comprehensive search, we need 
all the fields that Scryfall provides. Example: I want to search all green colored cards. 
With the fields above I wouldn't be able to do, however if I save all the scryfall data, I can easily query
data like this. 



Develop search functionality
* Plan it, view scryfall to get ideas. 




===done

**** troubleshoot issue with missing results - fine tune what shows when. Right now results are dissapearing b/c it resets to false, do we need to separat
**** Finish suggestion functionality - pass the name to the input field
****delete the suggestions after user chooses one
*** continue working on getting search results working with typescript - plan it if necessary take some time to get the Typescript down

*** We will do an autocomplete functionality after a certain pause in typing

*** continue writing down the fields that we want to store in the database and thus create a type: card
**** quickly review fields and then continue with next task of querying the api for a card and showing results
**** organize todo. Then architect scryfall api call better. Do we need a repository structure - probably not. But we do need to structure it better, maybe move Scryfall functionality to its own class
**** Continue figuring out when to show the suggestion box. May have to move to search by name rather than suggestion box

Develop the header 
*Setup icons and add them to the navigation links
Develop the home page structure


Authentication
* Set up authentication on App.js - if user is not logged in, take user to the logging page
** Continue figuring out how to make sure user is authenticated. Remember - if using front-end then you 
need to use client-side rendering - otherwise you can use back-end for everything. 

==> So in order to make sure the user is signed, we will use a <secureLayout> component that first check whether
the user is logged in to know what type of data to show. 
Q: Will this be pre-rendered or will we need to do server side rendering or even client side - fetch as needed. 
Answer:  Client side, because it will use UseEffect by react to update when session changes. So it depends on client side code!, 
but the regular static page is the login page message. 


Start creating todo outline and planning

* get familiar with authentication
* get familiar with authorization - how to know when user is logged in.

