Doing:

After that we can work on styles to make it presentable so we can start using it at least to populate new cards we get. We can use the search for later on.


================================
Bugs: 




===============================
NOTES About project

About: 
The site will basically be a user API to access the database. Without logging in, the user won't have access. 

Calling scryfall API
This is the structure of how the db will be saved. Pretty much just data 
that pertains to our collection. 

Treat cards that are two-cards-in-one separate. If the card_face object exists, save the other face in a separate table. 
These type of cards won't count against total. Will have their own entries, but when doing search will join these tables with $lookup

ID (automatically by MongoDB)
(don't need scryfall id because we will hold many different types/sets)


CARD OBJECT: 
scryfallId: string
name: string
colorIdentity: string[],
set: string,
isPromo: boolean,
qty: number,
artist: string
rarity: string
collectionNumber: string,
types: string[], //breaking down typeline into array to have separate searchable values


//optional params for each card
loyalty: number|null
keywords: string[] | [], 
promoTypes: string[]

//face properties - each card has at least one face
cardFaces: 
Each card is going to have a face, regardless if it only has one.
Face properties:
mana_cost: string | null ( we need to write a regular expression to convert mana_cost value if dual cards)
oracleText: string[],
image_uri = using image_uris field get one url (normal)

//optional face properties
power: string | null
toughness: string | null 
flavor_text: string|null


//Discarded
legalities: {} // i don't think i need this for lover's standard
cardFaceType: "normal|multiface" // we don't need this as a field. Can get value from getting card face count
OracleId: string (same across reprinted card editions, but don't really need it.


======================================
DONE

Add a loading animation to give the user feedback when cards are being fetched.

Fix Bugs

Set Bug
Will also need to fix set issue. Not show sets or allow multiple sets to be chosen, or similar sets are checked, when user selects kaldheim, all the kaldheim sets available are checked. Probable_FIX: remove promo sets but add them in the search, they seem to be prefixed with a "p" for promos. Commander products are ones we usually don't buy, except for commander legends, but that is not a "commander" product per se, according to scryfall. FIX: In the collection data I'm just tracking the three-digit code for set. When I search scryfall I use the prefixes 's' and 'p' to get all type of cards under that set. 's' is for pre release and 'p' is for promo. These are technically sets created by scryfall. 

Search Bug
*When searching for progenitus I'm shown all prints rather than general cards. May be an issue of how I'm searching for cards. Since the word "progenitus" is part of other cards, getting prints?
FIX: Had to add exact card name when searching for prints (could have also added oracleID since it is unique among all cards with same name but different sets)


Do we need to refactor some of the React code? A: not at the moment, maybe later on we will have to refactor the search results a little bit to unite with collection search when the search functionality is built

fix typescript errors + Remember to add optional values for card

Organize update (api) code. Move DB to its own model module. 

Rewrite how we get the collection number I think it can only be p or s, but may want to all letters in case more are added. We're not interested in them only the set code.

Just finished refactoring addCard in Collection model. Continue testing then move on to remove.

Work on remove functionality.

Continue Testing add functionality. Once it is working correctly remember to push it with git (smaller push incremements).

Push Add functionality to git.

Continue working on building card collection object. Build one field at a time. Just got done with collection number and types. 
After that continue with mana_cost values.

Work on setting promo and their types. It will make it easy to search later on.

Continue figuring out how to handle CMC. Do we need mana_cost in our collection data? Regarding CMC, There are many variations, {U}, {2/U}, {G/B}. Solve for these and continue looking for more variations. Cards that can help troubleshoot are: avalanche, biomass, beseech the queen.


Continue working on cardFaces. Images are tricky because not all multiface cards have different images, such as kitsune. The "Layout" is different. 

Adding collection card object to add functionality. Issue: faces, where do I place some of the data, inside the face? But for normal cards, we also have to search inside face. - yeah I guess that is how it will work. We can proceed this way and modify as necessary. Or make a quick prototype and try to query different data.

Continue working on incorporating the collection data into the add search. (currently at passing collection data into state, but as an array, will need it as an object instead)

Ran into an issue. Projection for find query not working. Can't limit the query by just retrieving scryfallid and qty. should we continue troubleshooting? ====> issue solved. was using the wrong documentation

We can now add to the db. Finetune the response you get from the update query. Fix headers sent error. Finish adding cards functionality then proceed to combine when making a search.


Continue working on add functionality. I have passed the card object from the PUT request, now is time to pass it to the db. Upsert and add one to the quantity.
Add functionality

*** continue combining collection with results data - working on getting collection without creating an infinite loop
*** does the collection have a set array and there keep quantity. --> No, it is better to have an object for each card, since one set can have multiple types of the same card

*** We will show results and query both the collection and the API
**** Since the card component is going to be used on both the "add" and "search" functionalities the card state will be in search Results along with the handler to add/remove cards.
**** [cont] we will pass getCollection data from search to card component


* Add the set selection functionality (any set - or specify the set)
*** Read about hooks for React - we need to get the sets after the components are mounted
*** Add an allowed set_type list for sets to avoid showing irrelevant sets. Then continue with the listener for set change.
*** Finish testing sets. Then move on to adding the add functionality.


I just added the listener functioanlity for add card collection menu. Next step is to add a card to the database.
* Solve issue about game:paper, to only show paper sets and also issue about collection number and set_type. Showing collection number with promo next to it. P for prmo, S for prerelease

Follows what we're adding to the db in our collection. The same fields.
* Plan it - when search have a + sign to add to collection or remove
** Add card will depend on the name of the card in order to search the API
*  Make sure you distinguish between promos

**** show prints when user searches for specific card or if the general results show only one of that card (general results only show one, but can have many prints)
**** troubleshoot issue with missing results - fine tune what shows when. Right now results are dissapearing b/c it resets to false, do we need to separat
**** Finish suggestion functionality - pass the name to the input field
****delete the suggestions after user chooses one
*** continue working on getting search results working with typescript - plan it if necessary take some time to get the Typescript down

*** We will do an autocomplete functionality after a certain pause in typing

*** continue writing down the fields that we want to store in the database and thus create a type: card
**** quickly review fields and then continue with next task of querying the api for a card and showing results
**** organize todo. Then architect scryfall api call better. Do we need a repository structure - probably not. But we do need to structure it better, maybe move Scryfall functionality to its own class
**** Continue figuring out when to show the suggestion box. May have to move to search by name rather than suggestion box


Develop search functionality
* Plan it, view scryfall to get ideas. 

Develop the header 
*Setup icons and add them to the navigation links
Develop the home page structure


Authentication
* Set up authentication on App.js - if user is not logged in, take user to the logging page
** Continue figuring out how to make sure user is authenticated. Remember - if using front-end then you 
need to use client-side rendering - otherwise you can use back-end for everything. 

==> So in order to make sure the user is signed, we will use a <secureLayout> component that first check whether
the user is logged in to know what type of data to show. 
Q: Will this be pre-rendered or will we need to do server side rendering or even client side - fetch as needed. 
Answer:  Client side, because it will use UseEffect by react to update when session changes. So it depends on client side code!, 
but the regular static page is the login page message. 


Start creating todo outline and planning

* get familiar with authentication
* get familiar with authorization - how to know when user is logged in.

